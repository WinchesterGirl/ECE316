#include  <stdio.h>
#include  <string.h>
#include  <sys/types.h>
#include  <sys/stat.h>
#include  <fcntl.h>
#include  <unistd.h>
#include  <sys/wait.h>
#include  <string>
#include  <string.h>
#include  <iostream>
#include <chrono>
#include <ctime>
#include <time.h>

using namespace std;
using namespace std::chrono;


#define   MAX_COUNT  5
#define   PROC       4
#define   MIN_CYC    2

int count=0;




int main()
{
    int  pid;
    int i,n,a,t;
    int   j,l,k;
    int p[PROC][2];
    int pos;
      high_resolution_clock::time_point begin_time;
      high_resolution_clock::time_point end_time;
      duration<double> elapsed;
    for(i=0; i<PROC; i++){
      if (pipe(p[i])==-1)

        {
            printf("Pipe Failed" );
            return 1;
        }
    }
    pid = fork();
    if (pid < 0){
      return -1;
    }

    for(i=0; i<PROC; i++){
      if((pid!=0)&&(i<PROC)){

        pid = fork();

        if (pid < 0){
          return -1;
        }
      }
      else if(pid==0){
        pos=i+1;
        break;
      }
    }
    if(pos==0)
    {
      kill(pid, SIGKILL);
      return 0;
    }
    else if(pos==1)
    {
      pid=fork();
      if(pid>0)
        pos=0;
    }


    if(pos==0)
    {
      for(j=1; j<=MAX_COUNT; j++){
        for(k=0; k<PROC; k++)
        {
            for(t=0;t<MIN_CYC;t++){
                close(p[k][0]);
                write(p[k][1], &j, sizeof(j));
                sleep(1);
            }
        }
      }
    }
    else
    {

      for(i=1; i<=MAX_COUNT; i++){
	
          int b=i-1;

          for(t=0;t<MIN_CYC;t++){
            close(p[pos-1][1]);
            read(p[pos-1][0], &a, sizeof(a));
            printf("process %d message %d\n",pos,(a+b) );
            count++;
            b++;
            if((a+b)>MAX_COUNT){
                t=MIN_CYC;
                i=MAX_COUNT+1;
                break;
            }
            
            if(pos==1 && t== MIN_CYC-1){
	              begin_time =high_resolution_clock::now();
               
            }
            if(pos==PROC && t==MIN_CYC-1){
	             end_time=high_resolution_clock::now();
               elapsed=duration_cast<duration<double>>(end_time-begin_time);
              
            }
          }
          i+=(MIN_CYC-2);
          
        }
    } 
       cout<<"TIME BETWEEN PROCESSES : ";
               cout<<elapsed.count()<<endl;
    wait(NULL);

}