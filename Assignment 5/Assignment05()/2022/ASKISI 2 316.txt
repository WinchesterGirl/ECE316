#include  <stdio.h>
#include  <string.h>
#include  <unistd.h>
#include <iostream>
#include <cstdio>
#include <sys/types.h>
#include <cstdlib>
#include <csignal>

#include <chrono>
using namespace std;

using namespace std::chrono;
#define   MAX_COUNT  89
int  main(){
    pid_t  pid;
    int    i;
    int j,pos;
//Message 1 start
    high_resolution_clock::time_point start_all=high_resolution_clock::now(); //Prin akrivos apo tin dimiourgia tis thigatrikis
    pid = fork();
    if (pid < 0){
        return -1;
        exit(pid<0);
    }
    //Message 1 declaration
    high_resolution_clock::time_point stop_process1_msg1;
    duration<double> duration_process1_msg1;
    high_resolution_clock::time_point stop_process2_msg1;
    duration<double> duration_process2_msg1;
    high_resolution_clock::time_point stop_process3_msg1;
    duration<double> duration_process3_msg1;
    high_resolution_clock::time_point stop_process4_msg1;
    duration<double> duration_process4_msg1;
    //Message 89 declaration (89-88 time)
high_resolution_clock::time_point start_process1_msg88_89;
high_resolution_clock::time_point start_process2_msg88_89;
high_resolution_clock::time_point start_process3_msg88_89;
high_resolution_clock::time_point start_process4_msg88_89;

    high_resolution_clock::time_point stop_process1_msg89;
    duration<double> duration_process1_msg89;
    high_resolution_clock::time_point stop_process2_msg89;
    duration<double> duration_process2_msg89;
    high_resolution_clock::time_point stop_process3_msg89;
    duration<double> duration_process3_msg89;
    high_resolution_clock::time_point stop_process4_msg89;
    duration<double> duration_process4_msg89;

    high_resolution_clock::time_point stop_process1_all;
    duration<double> duration_process1;
    high_resolution_clock::time_point stop_process2_all;
    duration<double> duration_process2;
    high_resolution_clock::time_point stop_process3_all;
    duration<double> duration_process3;
    high_resolution_clock::time_point stop_process4_all;
    duration<double> duration_process4;

//All messages  declaration (end process time -start)->No other declaration needed stop_processID_msg89-start.
    duration<double> duration_process1_all;
    duration<double> duration_process2_all;
    duration<double> duration_process3_all;
    duration<double> duration_process4_all;

    for(i=0; i<5; i++){

        if((pid!=0)&&(i<3)){//If pid is positive and i is between 0 and 3-> 0,1,2,3=> 4 diergasies i = diergasia
            
            pid = fork();
            if (pid < 0){
                return -1;
            }
        }

        else if(pid==0){
            pos=i+1;
            break;
        }


        

    }
        
    //Thema me to 2o process den to anixneuei

    for (i = 1; i <= MAX_COUNT; i++) {
        if (pid==0){
            sleep(i*pos*0.005);
            printf("process %d, message  %d\n", pos, i);





            if (i==1 && pos==1){
                stop_process1_msg1 = high_resolution_clock::now();
                duration_process1_msg1 =duration_cast<duration<double>>(stop_process1_msg1-start_all);    
            }
            else if (i==1 && pos==2){
                stop_process2_msg1 = high_resolution_clock::now();
                duration_process2_msg1 =duration_cast<duration<double>>(stop_process2_msg1-start_all);    
            } 
            else if (i==1 && pos==3){
                stop_process3_msg1 = high_resolution_clock::now();
                duration_process3_msg1 =duration_cast<duration<double>>(stop_process3_msg1-start_all);    
            }
            else if (i==1 && pos==4){
                stop_process4_msg1 = high_resolution_clock::now();
                duration_process4_msg1 =duration_cast<duration<double>>(stop_process4_msg1-start_all);    
            }
//------------------------------------------------------------------------------------
            else if(i==(MAX_COUNT-1) && pos==1){
                start_process1_msg88_89=high_resolution_clock::now();
            }
            else if(i==(MAX_COUNT-1) && pos==2){
                start_process2_msg88_89=high_resolution_clock::now();
            }
            else if(i==(MAX_COUNT-1) && pos==3){
                start_process3_msg88_89=high_resolution_clock::now();
            }
            else if(i==(MAX_COUNT-1) && pos==4){
                start_process4_msg88_89=high_resolution_clock::now();
            }

            else if(i== MAX_COUNT && pos==1){
                stop_process1_msg89=high_resolution_clock::now();
                duration_process1_msg89=duration_cast<duration<double>>(stop_process1_msg89-start_process1_msg88_89);
                duration_process1_all=duration_cast<duration<double>>(stop_process1_msg89-start_all);
            }
            else if(i== MAX_COUNT && pos==2){
                stop_process2_msg89=high_resolution_clock::now();
                duration_process2_msg89=duration_cast<duration<double>>(stop_process2_msg89-start_process2_msg88_89);
                duration_process2_all=duration_cast<duration<double>>(stop_process2_msg89-start_all);

            }
            else if(i== MAX_COUNT && pos==3){
                stop_process3_msg89=high_resolution_clock::now();
                duration_process3_msg89=duration_cast<duration<double>>(stop_process3_msg89-start_process3_msg88_89);
                duration_process3_all=duration_cast<duration<double>>(stop_process3_msg89-start_all);

            }
            else if(i== MAX_COUNT && pos==4){
                stop_process4_msg89=high_resolution_clock::now();
                duration_process4_msg89=duration_cast<duration<double>>(stop_process4_msg89-start_process4_msg88_89);
                duration_process4_all=duration_cast<duration<double>>(stop_process4_msg89-start_all);

            }
            /*if (i==1&& pos==2){
                auto stop_process2_msg1= high_resolution_clock::now();
                auto duration_process2_msg1=duration_cast<microseconds>(stop_process2_msg1-start_all);
                cout <<"Time for first message print execution in ms: " <<duration_process2_msg1.count()<<" ,for process "<<pos<<endl;

            }
            if (i==MAX_COUNT){
                auto stop_msglast = high_resolution_clock::now();
                auto duration_msglast =duration_cast<microseconds>(stop_msglast-start_all);
                cout <<"Time for LAST message print execution in ms: " <<duration_msglast.count()<<" ,for process "<<pos<<endl;
            }*/
        }
    }
    if(pos==1){
    //cout<<endl<<"Position for this cout is: "<<pos<<endl;  
    cout<< "Process "<<pos<<" First: "<<duration_process1_msg1.count()<<"/Last: "<<duration_process1_msg89.count()<<"/Duration: "<<duration_process1_all.count()<<endl;   
    //cout <<"Time for first message of Process 1 print execution in seconds is: " <<duration_process1_msg1.count()<<endl;
    //cout <<"Time for last message of Process 1 to get printed alone is: "<<duration_process1_msg89.count()<<endl;
    //cout <<"Time needed to print all messages of Process 1 since start is: "<<duration_process1_all.count()<<endl;
    }

    if(pos==2){
    //cout<<endl<<"Position for this cout is: "<<pos<<endl;
    cout<< "Process "<<pos<<" First: "<<duration_process2_msg1.count()<<"/Last: "<<duration_process2_msg89.count()<<"/Duration: "<<duration_process2_all.count()<<endl;  
    //cout <<"Time for first message of Process 2 print execution in seconds is: " <<duration_process2_msg1.count()<<endl;
    //cout <<"Time for last message of Process 2 to get printed alone is: "<<duration_process2_msg89.count()<<endl;
    //cout <<"Time needed to print all messages of Process 2 since start is: "<<duration_process2_all.count()<<endl;
    }

    if(pos==3){
    //cout<<endl<<"Position for this cout is: "<<pos<<endl;
    cout<< "Process "<<pos<<" First: "<<duration_process3_msg1.count()<<"/Last: "<<duration_process3_msg89.count()<<"/Duration: "<<duration_process3_all.count()<<endl;  
    //cout <<"Time for first message of Process 3 print execution in seconds is: " <<duration_process3_msg1.count()<<endl;
    //cout <<"Time for last message of Process 3 to get printed alone is: "<<duration_process3_msg89.count()<<endl;
    //cout <<"Time needed to print all messages of Process 3 since start is: "<<duration_process3_all.count()<<endl;
    }

    if(pos==4){
    //cout<<endl<<"Position for this cout is: "<<pos<<endl;
    cout<< "Process "<<pos<<" First: "<<duration_process4_msg1.count()<<"/Last: "<<duration_process4_msg89.count()<<"/Duration: "<<duration_process4_all.count()<<endl;  
    //cout <<"Time for first message of Process 4 print execution in seconds is: " <<duration_process4_msg1.count()<<endl;
    //cout <<"Time for last message of Process 4 to get printed alone is: "<<duration_process4_msg89.count()<<endl;
    //cout <<"Time needed to print all messages of Process 4 since start is: "<<duration_process4_all.count()<<endl;
    }


    //close (pos==2);
    //close (pos==3);
    //close (pos==4);
    //exit (pid=0);
    /*
    auto end_all=high_resolution_clock::now();
    auto duration_all =duration_cast<microseconds>(end_all-start_all);
    cout <<"Time needed for all Message prints: "<<duration_all.count()<<" ,for process "<<pos<<endl; */
    return 0;
}